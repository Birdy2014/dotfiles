#!/usr/bin/bash

# use bash builtin sleep
if [ -f /usr/lib/bash/sleep ]; then
    enable -f /usr/lib/bash/sleep sleep
    SLEEP='builtin sleep'
else
    SLEEP='sleep'
fi

CACHEDIR=${XDG_RUNTIME_DIR:-/tmp}/scripts/dwm-statusbar
mkdir -p $CACHEDIR

get_time() {
    echo "$(date "+%a %d %b %H:%M")"
}

get_volume() {
    local out
    if [ $(pamixer --get-mute) = true ]; then
        out=" "
    else
        local vol="$(pamixer --get-volume)"
        [ "$vol" -ge 50 ] && out=" $(pamixer --get-volume)"
        [ "$vol" -lt 50 ] && out=" $(pamixer --get-volume)"
    fi
    echo -n "$out | "
}

get_battery() {
    local out
    local battery_charge=0
    local battery_status_arr=( /sys/class/power_supply/BAT?/status )
    [[ "$battery_status_arr" == *'?'* ]] && exit
    local battery_status=$(cat ${battery_status_arr[0]})
    for path in /sys/class/power_supply/BAT?/capacity; do
        battery_charge=$(( $battery_charge + $(cat $path) ))
    done
    if [ "$battery_status" = Discharging ]; then
        if [ "$battery_charge" -lt 10 ]; then
            out="  $battery_charge"
        elif [ "$battery_charge" -lt 25 ]; then
            out="  $battery_charge"
        elif [ "$battery_charge" -lt 50 ]; then
            out="  $battery_charge"
        elif [ "$battery_charge" -lt 75 ]; then
            out="  $battery_charge"
        else
            out="  $battery_charge"
        fi
    elif [ "$battery_status" = Charging ]; then
        out=" $battery_charge"
    fi
    echo -n "$out | "
}

get_connections() {
    local connections="$(nmcli -g type,name connection show --active)"
    local wifi=$(echo "$connections" | awk -F : '$1 ~ /wireless/ {print $2}')
    local ethernet=$(echo "$connections" | awk -F : '$1 ~ /ethernet/ {print "Connected"}')
    local vpn=$(echo "$connections" | awk -F : '$1 ~ /vpn/ {print $2}')
    local out
    for i in wifi ethernet vpn; do
        [ -z "${!i}" ] || out="$out | $i: ${!i}"
    done
    [ -z "$out" ] && out='Not Connected' || out="${out:3}"
    echo -n "$out | "
}

update_network() {
    local sum=0
    for arg; do
        read -r i < "$arg"
        sum=$(( sum + i ))
    done
    local time=$(date +%s)
    local cache=$CACHEDIR/${1##*/}
    local oldsum=$(sed -n 1p $cache)
    local oldtime=$(sed -n 2p $cache)
    printf '%d\n%d' $sum $time > $cache
    if [ $(( time - oldtime )) -eq 0 ]; then
        echo -n 0k
    else
        printf '%dk' $(( ( (sum - oldsum) / (time - oldtime) ) / 1042 ))
    fi
}

get_network() {
    local rx=$(update_network /sys/class/net/*/statistics/rx_bytes)
    local tx=$(update_network /sys/class/net/*/statistics/tx_bytes)
    printf ' %5s  %5s | ' "$rx" "$tx"
}

get_calendar() {
    local out
    which khal &> /dev/null || exit
    out="$(khal list now $(date -I) 23:59 --day-format '' --format '{start-style} {title}' | sed -n 1p)"
    echo -n "$out | "
}

update_statusbar() {
    local statusbar_text
    for func in get_calendar get_connections get_network get_battery get_volume get_time; do
        statusbar_text="${statusbar_text}$($func)"
    done
    xsetroot -name "$statusbar_text"
}

loop() {
    while true; do
        update_statusbar
        $SLEEP 5
    done
}

case $1 in
    refresh) update_statusbar;;
    start) [ -f $CACHEDIR/pidfile ] && ps $(< $CACHEDIR/pidfile) > /dev/null && echo "dwm-statusbar is already running" || (loop & echo $! > $CACHEDIR/pidfile);;
    stop) [ -f $CACHEDIR/pidfile ] && (kill $(< $CACHEDIR/pidfile); rm $CACHEDIR/pidfile) || echo "dwm-statusbar is not running";;
esac
